%% Initialization
clear ; close all; clc

load('digits');


n = size(train0, 1); 
n_classes =10

prior0 = sum(train0,1)/n; 
prior1 = sum(train1,1)/n;
prior2 = sum(train2,1)/n;
prior3 = sum(train3,1)/n;
prior4 = sum(train4,1)/n;
prior5 = sum(train5,1)/n;
prior6 = sum(train6,1)/n;
prior7 = sum(train7,1)/n;
prior8 = sum(train8,1)/n;
prior9 = sum(train9,1)/n;

p = [prior0; prior1; prior2; prior3; prior4; prior5; prior6; prior7; prior8; prior9];

p ( p == 0) = 0.00001;

for j = 1 :n_classes
    for i = 1 : 500
        if j == 1 
            tmp(i, :) = train0(i, :) * log(p(j, :))' + (1 - train0(i, :)) * log(1 - p(j, :))';
        elseif j==2 
            tmp(i, :) = train1(i, :) * log(p(j, :))' + (1 - train1(i, :)) * log(1 - p(j, :))';
        elseif j==3 
            tmp(i, :) = train2(i, :) * log(p(j, :))' + (1 - train2(i, :)) * log(1 - p(j, :))';
        elseif j==4 
            tmp(i, :) = train3(i, :) * log(p(j, :))' + (1 - train2(i, :)) * log(1 - p(j, :))';
        elseif j==5 
            tmp(i, :) = train4(i, :) * log(p(j, :))' + (1 - train4(i, :)) * log(1 - p(j, :))';
        elseif j==6 
            tmp(i, :) = train5(i, :) * log(p(j, :))' + (1 - train5(i, :)) * log(1 - p(j, :))';
        elseif j==7 
            tmp(i, :) = train6(i, :) * log(p(j, :))' + (1 - train6(i, :)) * log(1 - p(j, :))';
        elseif j==8 
            tmp(i, :) = train7(i, :) * log(p(j, :))' + (1 - train7(i, :)) * log(1 - p(j, :))';
        elseif j==9 
            tmp(i, :) = train8(i, :) * log(p(j, :))' + (1 - train8(i, :)) * log(1 - p(j, :))';
        elseif j==10 
            tmp(i, :) = train9(i, :) * log(p(j, :))' + (1 - train9(i, :)) * log(1 - p(j, :))';
        end
    end
    if j == 1 
            image = train0' * tmp;
        elseif j==2 
            image = train1' * tmp;
        elseif j==3 
            image = train2' * tmp;
        elseif j==4 
            image = train3' * tmp;
        elseif j==5 
            image = train4' * tmp;
        elseif j==6 
            image = train5' * tmp;
        elseif j==7 
            image = train6' * tmp;
        elseif j==8 
            image = train7' * tmp;
        elseif j==9 
          image = train8' * tmp;
        elseif j==10 
            image = train9' * tmp;
        end

figure;
imagesc(reshape(image, 28, 28)')
end

counter=0;
counter_2=0;

confusion_matrix=zeros(10,10);




test_set_size=size(test0,1) * n_classes;
for i=1:n_classes
  label=i;
  counter =0;
  for j=1:size(test0,1)
    prediction=[];
    if i == 1
        prediction=[...
        mean(log(p(1, :)).*test0(j,:)+log(1-p(1, :)).*(1-test0(j,:))),...
        mean(log(p(2, :)).*test0(j,:)+log(1-p(2, :)).*(1-test0(j,:))),...
        mean(log(p(3, :)).*test0(j,:)+log(1-p(3, :)).*(1-test0(j,:))),...
        mean(log(p(4, :)).*test0(j,:)+log(1-p(4, :)).*(1-test0(j,:))),...
        mean(log(p(5, :)).*test0(j,:)+log(1-p(5, :)).*(1-test0(j,:))),...
        mean(log(p(6, :)).*test0(j,:)+log(1-p(6, :)).*(1-test0(j,:))),...
        mean(log(p(7, :)).*test0(j,:)+log(1-p(7, :)).*(1-test0(j,:))),...
        mean(log(p(8, :)).*test0(j,:)+log(1-p(8, :)).*(1-test0(j,:))),...
        mean(log(p(9, :)).*test0(j,:)+log(1-p(9, :)).*(1-test0(j,:))),...
        mean(log(p(10, :)).*test0(j,:)+log(1-p(10, :)).*(1-test0(j,:)))];
    elseif i == 2 
        prediction=[...
        mean(log(p(1, :)).*test1(j,:)+log(1-p(1, :)).*(1-test1(j,:))),...
        mean(log(p(2, :)).*test1(j,:)+log(1-p(2, :)).*(1-test1(j,:))),...
        mean(log(p(3, :)).*test1(j,:)+log(1-p(3, :)).*(1-test1(j,:))),...
        mean(log(p(4, :)).*test1(j,:)+log(1-p(4, :)).*(1-test1(j,:))),...
        mean(log(p(5, :)).*test1(j,:)+log(1-p(5, :)).*(1-test1(j,:))),...
        mean(log(p(6, :)).*test1(j,:)+log(1-p(6, :)).*(1-test1(j,:))),...
        mean(log(p(7, :)).*test1(j,:)+log(1-p(7, :)).*(1-test1(j,:))),...
        mean(log(p(8, :)).*test1(j,:)+log(1-p(8, :)).*(1-test1(j,:))),...
        mean(log(p(9, :)).*test1(j,:)+log(1-p(9, :)).*(1-test1(j,:))),...
        mean(log(p(10, :)).*test1(j,:)+log(1-p(10, :)).*(1-test1(j,:)))];
    elseif i == 3 
        prediction=[...
        mean(log(p(1, :)).*test2(j,:)+log(1-p(1, :)).*(1-test2(j,:))),...
        mean(log(p(2, :)).*test2(j,:)+log(1-p(2, :)).*(1-test2(j,:))),...
        mean(log(p(3, :)).*test2(j,:)+log(1-p(3, :)).*(1-test2(j,:))),...
        mean(log(p(4, :)).*test2(j,:)+log(1-p(4, :)).*(1-test2(j,:))),...
        mean(log(p(5, :)).*test2(j,:)+log(1-p(5, :)).*(1-test2(j,:))),...
        mean(log(p(6, :)).*test2(j,:)+log(1-p(6, :)).*(1-test2(j,:))),...
        mean(log(p(7, :)).*test2(j,:)+log(1-p(7, :)).*(1-test2(j,:))),...
        mean(log(p(8, :)).*test2(j,:)+log(1-p(8, :)).*(1-test2(j,:))),...
        mean(log(p(9, :)).*test2(j,:)+log(1-p(9, :)).*(1-test2(j,:))),...
        mean(log(p(10, :)).*test2(j,:)+log(1-p(10, :)).*(1-test2(j,:)))];
    elseif i == 4 
        prediction=[...
        mean(log(p(1, :)).*test3(j,:)+log(1-p(1, :)).*(1-test3(j,:))),...
        mean(log(p(2, :)).*test3(j,:)+log(1-p(2, :)).*(1-test3(j,:))),...
        mean(log(p(3, :)).*test3(j,:)+log(1-p(3, :)).*(1-test3(j,:))),...
        mean(log(p(4, :)).*test3(j,:)+log(1-p(4, :)).*(1-test3(j,:))),...
        mean(log(p(5, :)).*test3(j,:)+log(1-p(5, :)).*(1-test3(j,:))),...
        mean(log(p(6, :)).*test3(j,:)+log(1-p(6, :)).*(1-test3(j,:))),...
        mean(log(p(7, :)).*test3(j,:)+log(1-p(7, :)).*(1-test3(j,:))),...
        mean(log(p(8, :)).*test3(j,:)+log(1-p(8, :)).*(1-test3(j,:))),...
        mean(log(p(9, :)).*test3(j,:)+log(1-p(9, :)).*(1-test3(j,:))),...
        mean(log(p(10, :)).*test3(j,:)+log(1-p(10, :)).*(1-test3(j,:)))];
    elseif i == 5 
        prediction=[...
        mean(log(p(1, :)).*test4(j,:)+log(1-p(1, :)).*(1-test4(j,:))),...
        mean(log(p(2, :)).*test4(j,:)+log(1-p(2, :)).*(1-test4(j,:))),...
        mean(log(p(3, :)).*test4(j,:)+log(1-p(3, :)).*(1-test4(j,:))),...
        mean(log(p(4, :)).*test4(j,:)+log(1-p(4, :)).*(1-test4(j,:))),...
        mean(log(p(5, :)).*test4(j,:)+log(1-p(5, :)).*(1-test4(j,:))),...
        mean(log(p(6, :)).*test4(j,:)+log(1-p(6, :)).*(1-test4(j,:))),...
        mean(log(p(7, :)).*test4(j,:)+log(1-p(7, :)).*(1-test4(j,:))),...
        mean(log(p(8, :)).*test4(j,:)+log(1-p(8, :)).*(1-test4(j,:))),...
        mean(log(p(9, :)).*test4(j,:)+log(1-p(9, :)).*(1-test4(j,:))),...
        mean(log(p(10, :)).*test4(j,:)+log(1-p(10, :)).*(1-test4(j,:)))];
    elseif i == 6 
        prediction=[...
        mean(log(p(1, :)).*test5(j,:)+log(1-p(1, :)).*(1-test5(j,:))),...
        mean(log(p(2, :)).*test5(j,:)+log(1-p(2, :)).*(1-test5(j,:))),...
        mean(log(p(3, :)).*test5(j,:)+log(1-p(3, :)).*(1-test5(j,:))),...
        mean(log(p(4, :)).*test5(j,:)+log(1-p(4, :)).*(1-test5(j,:))),...
        mean(log(p(5, :)).*test5(j,:)+log(1-p(5, :)).*(1-test5(j,:))),...
        mean(log(p(6, :)).*test5(j,:)+log(1-p(6, :)).*(1-test5(j,:))),...
        mean(log(p(7, :)).*test5(j,:)+log(1-p(7, :)).*(1-test5(j,:))),...
        mean(log(p(8, :)).*test5(j,:)+log(1-p(8, :)).*(1-test5(j,:))),...
        mean(log(p(9, :)).*test5(j,:)+log(1-p(9, :)).*(1-test5(j,:))),...
        mean(log(p(10, :)).*test5(j,:)+log(1-p(10, :)).*(1-test5(j,:)))];
    elseif i == 7 
        prediction=[...
        mean(log(p(1, :)).*test6(j,:)+log(1-p(1, :)).*(1-test6(j,:))),...
        mean(log(p(2, :)).*test6(j,:)+log(1-p(2, :)).*(1-test6(j,:))),...
        mean(log(p(3, :)).*test6(j,:)+log(1-p(3, :)).*(1-test6(j,:))),...
        mean(log(p(4, :)).*test6(j,:)+log(1-p(4, :)).*(1-test6(j,:))),...
        mean(log(p(5, :)).*test6(j,:)+log(1-p(5, :)).*(1-test6(j,:))),...
        mean(log(p(6, :)).*test6(j,:)+log(1-p(6, :)).*(1-test6(j,:))),...
        mean(log(p(7, :)).*test6(j,:)+log(1-p(7, :)).*(1-test6(j,:))),...
        mean(log(p(8, :)).*test6(j,:)+log(1-p(8, :)).*(1-test6(j,:))),...
        mean(log(p(9, :)).*test6(j,:)+log(1-p(9, :)).*(1-test6(j,:))),...
        mean(log(p(10, :)).*test6(j,:)+log(1-p(10, :)).*(1-test6(j,:)))];
    elseif i == 8 
        prediction=[...
        mean(log(p(1, :)).*test7(j,:)+log(1-p(1, :)).*(1-test7(j,:))),...
        mean(log(p(2, :)).*test7(j,:)+log(1-p(2, :)).*(1-test7(j,:))),...
        mean(log(p(3, :)).*test7(j,:)+log(1-p(3, :)).*(1-test7(j,:))),...
        mean(log(p(4, :)).*test7(j,:)+log(1-p(4, :)).*(1-test7(j,:))),...
        mean(log(p(5, :)).*test7(j,:)+log(1-p(5, :)).*(1-test7(j,:))),...
        mean(log(p(6, :)).*test7(j,:)+log(1-p(6, :)).*(1-test7(j,:))),...
        mean(log(p(7, :)).*test7(j,:)+log(1-p(7, :)).*(1-test7(j,:))),...
        mean(log(p(8, :)).*test7(j,:)+log(1-p(8, :)).*(1-test7(j,:))),...
        mean(log(p(9, :)).*test7(j,:)+log(1-p(9, :)).*(1-test7(j,:))),...
        mean(log(p(10, :)).*test7(j,:)+log(1-p(10, :)).*(1-test7(j,:)))];
    elseif i == 9 
        prediction=[...
        mean(log(p(1, :)).*test8(j,:)+log(1-p(1, :)).*(1-test8(j,:))),...
        mean(log(p(2, :)).*test8(j,:)+log(1-p(2, :)).*(1-test8(j,:))),...
        mean(log(p(3, :)).*test8(j,:)+log(1-p(3, :)).*(1-test8(j,:))),...
        mean(log(p(4, :)).*test8(j,:)+log(1-p(4, :)).*(1-test8(j,:))),...
        mean(log(p(5, :)).*test8(j,:)+log(1-p(5, :)).*(1-test8(j,:))),...
        mean(log(p(6, :)).*test8(j,:)+log(1-p(6, :)).*(1-test8(j,:))),...
        mean(log(p(7, :)).*test8(j,:)+log(1-p(7, :)).*(1-test8(j,:))),...
        mean(log(p(8, :)).*test8(j,:)+log(1-p(8, :)).*(1-test8(j,:))),...
        mean(log(p(9, :)).*test8(j,:)+log(1-p(9, :)).*(1-test8(j,:))),...
        mean(log(p(10, :)).*test8(j,:)+log(1-p(10, :)).*(1-test8(j,:)))];
    elseif i == 10 
        prediction=[...
        mean(log(p(1, :)).*test9(j,:)+log(1-p(1, :)).*(1-test9(j,:))),...
        mean(log(p(2, :)).*test9(j,:)+log(1-p(2, :)).*(1-test9(j,:))),...
        mean(log(p(3, :)).*test9(j,:)+log(1-p(3, :)).*(1-test9(j,:))),...
        mean(log(p(4, :)).*test9(j,:)+log(1-p(4, :)).*(1-test9(j,:))),...
        mean(log(p(5, :)).*test9(j,:)+log(1-p(5, :)).*(1-test9(j,:))),...
        mean(log(p(6, :)).*test9(j,:)+log(1-p(6, :)).*(1-test9(j,:))),...
        mean(log(p(7, :)).*test9(j,:)+log(1-p(7, :)).*(1-test9(j,:))),...
        mean(log(p(8, :)).*test9(j,:)+log(1-p(8, :)).*(1-test9(j,:))),...
        mean(log(p(9, :)).*test9(j,:)+log(1-p(9, :)).*(1-test9(j,:))),...
        mean(log(p(10, :)).*test9(j,:)+log(1-p(10, :)).*(1-test9(j,:)))];
    end
    [~,pred]=max(prediction);
    confusion_matrix(label,pred)=confusion_matrix(label,pred)+1;
    if(pred==label)

      counter=counter+1;
      counter_2=counter_2+1;
    end
  end
  disp(['Accuracy for testing digits ',num2str(label-1),' : ',num2str(counter/(size(test0,1)))]);
end
disp(['Accuracy: ', num2str(counter_2/test_set_size)]);
confusion_matrix=confusion_matrix./size(test0,1);

% Displaying the confusion matrix
figure(11)
imagesc(confusion_matrix);
title('The Confusion Matrix');

